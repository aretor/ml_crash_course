{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"EN_02_MLP TODO","provenance":[{"file_id":"1ppufvcv72-uuSP1fUm6SjQ70goJVjRy0","timestamp":1576571071245}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"860ff1214beb4c21aa649faeb8e810d1":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_355e90d9e3634d18aaaf9906566fb4ca","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_892b8d98ed084d90916663c0ecb489e8","IPY_MODEL_b336ef71bdde4b209ab078ed3588ad97"]}},"355e90d9e3634d18aaaf9906566fb4ca":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"892b8d98ed084d90916663c0ecb489e8":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_fcf13191a4db47478aaf2d57a1025725","_dom_classes":[],"description":"E: 0.1237, ACC: 59.0%: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":2000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":2000,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_51efa94a8eae4152b924941a84ec184d"}},"b336ef71bdde4b209ab078ed3588ad97":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_d42b681bc7d8424fbf9e40732cca98a1","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 2000/2000 [03:52&lt;00:00,  8.60it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f47d9e1dffd747569f514c14e36e2b19"}},"fcf13191a4db47478aaf2d57a1025725":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"51efa94a8eae4152b924941a84ec184d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d42b681bc7d8424fbf9e40732cca98a1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"f47d9e1dffd747569f514c14e36e2b19":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"a4h2wC91R1lB"},"source":["# Deep Learning: Multilayer Perceptron\n","![alt MLP](https://cdn-images-1.medium.com/max/1600/1*Mw6LKUG8AWQhG73H1caT8w.png)\n","\n","\n","$\\renewcommand{\\vec}{\\mathbf}$\n","\n","*Tutorial by* [Alessandro Torcinovich](https://aretor.github.io) @ Ca' Foscari University\n"]},{"cell_type":"markdown","metadata":{"id":"ykF-ZTbdTOmX"},"source":["---\n","## 1. McCulloch & Pitts' Neuron\n","In this tutorial we will see how to build our first neural network, the Multilayer Perceptron (MLP), and how to use it to learn simple, logical functions (AND and XOR) and to classify their input correctly.\n","\n","Nowadays, a neural network (NN) is one of the most used classifiers for the classification of images (and other types of data). The MLP is one of this networks and its history begins in the 1943, when McCulloch and Pitts design the first mathematical model of a neuron, the **M-P Neuron**\n","\n","![alt M-PN](https://i2.wp.com/tec4tric.com/wp-content/uploads/2018/10/mcculouch-pitts.png)\n","\n","The M-P takes binary inputs only and outputs a binary number. Its way of functioning is simple:\n","1. Take an input $\\vec{x}$\n","1. Compute the **aggregation function**: $g(\\vec{x}) = \\sum_i^n x_i$\n","2. Compute the **step function**: if $g(\\vec{x}) \\ge \\theta$ then $f(\\vec{x}) = 1$ otherwise $f(\\vec{x}) = 0$.\n","\n","$\\theta$ is the **bias**, the threshold that decides if the neuron \"fires\" ($1$) or not ($0$). It may be learned or set by hand.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"fvcmgzTcgJ0b"},"source":["Let's suppose we want to learn the function AND ($\\land$). First, I build a dataset with binary observations $\\vec{X} \\in \\mathbb{R}^{n \\times 2}$, containing $n$ observations. Each observation $\\vec{x}_i$ is a 2D vector containing the input to the AND function, while the label $y_i$ contains the output of the function. For example, if $\\vec{x}_i = \\begin{pmatrix}0 & 1\\end{pmatrix}$ then $y_i = 0 \\land 1 = 0$."]},{"cell_type":"code","metadata":{"id":"uc5-T_sFhZQt"},"source":["from tqdm import tqdm_notebook as tqdm\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","import torch\n","import torch.nn as nn  # contains NN related stuff\n","\n","%matplotlib inline\n","device = 'cuda'  # change at your taste"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cEsI7yRjRkE8","colab":{"base_uri":"https://localhost:8080/","height":127},"executionInfo":{"status":"ok","timestamp":1590663852065,"user_tz":-120,"elapsed":537,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"4f2e4420-a970-4a69-ed06-bda34e55f814"},"source":["n = 100\n","X = torch.rand(n, 2)\n","X = (X >= 0.5)  # binarize the dataset\n","X = X.to(torch.float)  # convert to float\n","y_true = X.prod(dim=1)  # generate the labels\n","X[:10], y_true[:10]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1., 1., 0., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 1.,\n","        0., 1., 1., 0., 1., 1., 1., 1., 1., 1., 1., 0., 1., 1., 1., 1., 1., 1.,\n","        1., 1., 1., 1., 1., 1., 1., 0., 1., 1., 1., 1., 1., 0., 1., 1., 1., 1.,\n","        1., 0., 1., 0., 1., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 1., 1., 1.,\n","        0., 1., 1., 0., 0., 1., 1., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 1.,\n","        1., 1., 0., 0., 1., 0., 0., 1., 1., 1.])"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"_WrjJqBXluBt"},"source":["Now let's define our neuron. It will be a subclass of the abstract class `torch.nn.Module`, used to define a NN in PyTorch. When you subclass `Module`, you must overwrite the abstract method `forward` that defines the **forward step** of the model, described before (the **backward step**, instead, is automatic as we have seen)"]},{"cell_type":"code","metadata":{"id":"1zaNXCbmmn-r"},"source":["class MPN(nn.Module):\n","  def __init__(self, theta):\n","    super().__init__()\n","    self.theta = theta\n","\n","  def forward(self, x):\n","    g_x = x.sum(dim=1)\n","    f_x = (g_x >= self.theta).to(torch.float)\n","    return f_x\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sCFfoS3Io1Md"},"source":["Let's also define a function to compute the accuracy of our model"]},{"cell_type":"code","metadata":{"id":"Ibw_P1RyoACk"},"source":["def evaluate(y_true, y_pred):\n","  correct = (y_true == y_pred).sum()\n","  accuracy = 100. * correct / y_true.shape[0]\n","  return accuracy.item()  # returns just the value without the tensor wrapper"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sHSnRNYTqoja"},"source":["Now we're ready to test ou first model with different values of `theta`"]},{"cell_type":"code","metadata":{"id":"Tllf3zziqwAB","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1590664061467,"user_tz":-120,"elapsed":445,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"f3b673cb-862e-4340-e99b-7867494bcab0"},"source":["theta = 2.\n","mpn = MPN(theta)\n","y_pred = mpn(X)  # calls the forward method\n","accuracy = evaluate(y_true, y_pred)\n","print(f'The accuracy with theta = {theta} is {round(accuracy, 2)}%')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The accuracy with theta = 1.0 is 56.0%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GImebFP3wdjm"},"source":["The AND function is rather simple to learn. Let's try to adress a more complex problem. In the real dataset, the collected data contain noise that must be filtered. First of all, let's perturb our dataset $\\vec{X}$ with a bit of noise"]},{"cell_type":"code","metadata":{"id":"lWM__mGwy90g","colab":{"base_uri":"https://localhost:8080/","height":219},"executionInfo":{"status":"ok","timestamp":1590664145150,"user_tz":-120,"elapsed":533,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"22fa08b5-b13d-4bd7-b1bc-1981a68bc0e0"},"source":["a, b = -2e-1, 2e-1  # floats in scientific notation: 2e-1 == 2 * 10 ** -1\n","eps = a + (b - a) * torch.rand(X.shape)  # random noise between in [a, b)\n","Xp = X + eps\n","# treshold values over 1 and under 0\n","Xp[:10], y_true[:10]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[ 1.1338,  1.1784],\n","         [ 0.9988,  1.1834],\n","         [ 0.0504, -0.0511],\n","         [ 0.1258,  1.1844],\n","         [-0.0301,  0.9202],\n","         [ 0.9319,  0.0445],\n","         [ 1.0381, -0.1305],\n","         [ 1.1849,  0.9630],\n","         [ 0.8277,  1.0292],\n","         [ 0.9996,  1.1195]]),\n"," tensor([1., 1., 0., 0., 0., 0., 0., 1., 1., 1.]))"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"q_hoperHc8bE","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1590664149057,"user_tz":-120,"elapsed":775,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"791c0226-19dd-4aec-fffc-803e764c8794"},"source":["plt.scatter(Xp[:, 0], Xp[:, 1,], c=y_true)\n","plt.title('Noisy AND')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ysWXHvng2ohM"},"source":["If we run the M-P Neuron, the accuracy decreases"]},{"cell_type":"code","metadata":{"id":"HIwrR0kS2uZZ","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1590664205402,"user_tz":-120,"elapsed":432,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"c7dbda8f-1f5f-4ec5-8f55-68d3de6c2c84"},"source":["y_pred = mpn(Xp)\n","accuracy = evaluate(y_true, y_pred)\n","print(f'The accuracy with theta = {theta} is {round(accuracy, 2)}%')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The accuracy with theta = 1.0 is 80.0%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0hk9Npx43C4D"},"source":["The neuron must be improved by introducing some learnable parameters, and a learning algorithm. First of all, the forward step changes in the following way:\n","1. Take an input $\\vec{x}$\n","2. Compute $g(\\vec{x}) = w_0 + \\vec{w}^\\top\\vec{x} = \\sum_{i=0}^n w_i x_i$, with $x_0 = 1$\n","3. Compute the thresholding function: if $g(\\vec{x}) \\ge 0$ then $f(\\vec{x}) = 1$ otherwise $f(\\vec{x}) = 0$\n","\n","The parameters to learn are $\\vec{w} = \\begin{pmatrix}w_1 & w_2 & \\dots & w_m\\end{pmatrix}^\\top$ and $w_0 = -\\theta$, the bias, that we were manually setting before. In our case $n = 2$, so only $3$ parameters need to be learned.\n","\n","This model is called Perceptron and have been theorized by Rosendblatt in the 1958\n","\n","![alt Perceptron](https://cse3521.artifice.cc/images/perceptron.png)\n","\n"]},{"cell_type":"code","metadata":{"id":"AMWNtDGO-Nr8"},"source":["class Perceptron(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    w = torch.zeros(3)\n","\n","    # special wrapper for learnable parameters, by default it requires the grad\n","    # but in our case we don't use it\n","    self.w = nn.Parameter(w, requires_grad=False)  \n","\n","  def forward(self, x):\n","    g_x = x @ self.w\n","    f_x = (g_x >= 0).to(torch.float)\n","    return f_x"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xQCNUZtuBE_Y"},"source":["Now, we need an algorithm that allow us to learn the weights. In this case, the **delta-rule** is used. The procedure is quite simple:\n","\n","1. $e = 0$\n","2. while $e < \\mathcal{E}$\n","   1. for $\\vec{x}_i \\in \\vec{X}$\n","      1. $\\hat{y}_i = f(\\vec{x}_i)$\n","      2. for $j \\in \\{0, \\dots, m\\}$\n","         1. $w_j^{(e + 1)} = w_j^{(e)} + \\eta(y_i - \\hat{y}_i)x_{ij}$\n","   2. $e = e + 1$\n","\n","\n","$\\vec{\\eta}$ is the **learning rate** (lr) and is set manually. There is not a precise rule to set it: if the lr is too low it will slow down the convergence, if it is too high the algorithm might not converge.\n","\n","A complete iteration over all the dataset is called **epoch** (for big datasets it takes a lot 😅). We can decide to repeat the algorithm for a fixed number of epochs $\\mathcal{E}$ in such a way to improve the final result"]},{"cell_type":"code","metadata":{"id":"Ksp8LayiF4KP"},"source":["def delta_rule(X, y_true, p, epochs=1, eta=0.5, device='cpu'):\n","  X, y_true = X.to(device), y_true.to(device)\n","  for e in range(1, epochs + 1):\n","    for x, y in zip(X, y_true):\n","      y_hat = p(x)\n","      for param in p.parameters():\n","        param += eta * (y - y_hat) * x  \n","\n","    print(f'\\rACC: {evaluate(y_true, p(X))}', end='')\n","\n","def pad1(X):\n","  \"\"\" Pad the dataset with ones on the left\"\"\"\n","  return torch.cat((torch.ones(len(X), 1), X), dim=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IQ6OoV1FNxYM","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1590664619923,"user_tz":-120,"elapsed":9240,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"d33e8d4e-14a8-4507-fbe9-638a199d33f7"},"source":["p = Perceptron().to(device)\n","delta_rule(pad1(Xp), y_true, p, epochs=1, eta=0.05, device=device)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\rACC: 100.0"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"U-Lxr9yt1r34","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1590664871622,"user_tz":-120,"elapsed":874,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"0c67b51a-34ae-4212-e22a-eb318bdde915"},"source":["# plotting the decision boundary\n","def plot_decision_boundary(X, y, w, low, high):\n","  m, q = -w[1] / w[2], -w[0] / w[2]\n","  px = torch.tensor([-1e-1, 1.1])\n","  py = m * px + q\n","  plt.scatter(X[:, 0], X[:, 1], c=y)\n","  plt.plot(px, py)\n","  plt.show()\n","\n","plot_decision_boundary(Xp, y_true, p.w.to('cpu'), a, b)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"bZyu2gJnxL5G"},"source":["The perceptron previously proposed allow us to solve a generic problem of binary classification, under the assumption that it is **linealy separable**, that is, the observation of different classes msut be separable by a line. If we try, for example, to learn the XOR function, returning $1$ if only one of the two input is $1$, then the perceptron fails"]},{"cell_type":"code","metadata":{"id":"qGBsmaD_xJyO","colab":{"base_uri":"https://localhost:8080/","height":201},"executionInfo":{"status":"ok","timestamp":1590664738987,"user_tz":-120,"elapsed":468,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"cd6d8dd9-e6c3-4bb2-c42e-49e6beda26cc"},"source":["Xor = torch.rand(n, 2)  # pun intended here :D\n","Xor = (Xor >= 0.5).to(torch.float)\n","yor_true = Xor.sum(dim=1) % 2\n","Xor[:10], yor_true[:10]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[0., 0.],\n","         [0., 0.],\n","         [0., 0.],\n","         [0., 1.],\n","         [1., 1.],\n","         [1., 1.],\n","         [0., 1.],\n","         [0., 0.],\n","         [1., 0.],\n","         [0., 1.]]), tensor([0., 0., 0., 1., 0., 0., 1., 0., 1., 1.]))"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"536qnHVQ1SKo","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1590664907654,"user_tz":-120,"elapsed":32467,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"ed25b5e6-ffe6-4746-8d89-014b8d4a5672"},"source":["p = Perceptron().to(device)\n","delta_rule(pad1(Xor), yor_true, p, epochs=1000, eta=1.5, device=device)\n","\n","plot_decision_boundary(Xor, yor_true, p.w.to('cpu'), a, b)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["ACC: 50.0"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"sMJQsfGR7o6R"},"source":["The problem is not linearly separable and the perceptron learns a linear operator. To solve this problem we are going to modify the algorithm in two ways:\n","- Modify the step function with a more generic **non-linear activation function**\n","- Modify the delta-rule by using the algorithm of **Gradient Descent (GD)**\n","\n","As a new activation function, we use the sigmoid function:\n","\n","$$\\sigma(x) = \\frac{e^x}{e^x + 1}$$\n"]},{"cell_type":"code","metadata":{"id":"8ZeQGdab7nLL","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1590664861464,"user_tz":-120,"elapsed":733,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"2d14292f-f587-4419-8ee6-f5d6e47648de"},"source":["px = torch.linspace(-10, 10, 1000)\n","tx = (px >= 0).to(torch.float)\n","sx = torch.sigmoid(px)\n","\n","plt.plot(px, tx)\n","plt.plot(px, sx)\n","plt.legend(('step', 'sigmoid'))\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"XASc3eYAm4tY"},"source":["Il sigmoide è una versione 'soft' della step function, però è differenziabile! Questo ci servirà per utilizzare il GD."]},{"cell_type":"markdown","metadata":{"id":"QkhS20qVYp-y"},"source":["It is not enough. Indeed, the perceptron is not flexible. Our model has only one neuron. It is time now, to make it smarter, by adding other neurons 🤯\n","\n","Here is our new architecture:\n","\n","![ALT MLP](https://miro.medium.com/max/543/1*qXt_iBvWods-FOvTldxYFw.png)\n","\n","The model is called **Multilayer Perceptron (MLP)** and in our case it is comprised of an **input layer**, an **hidden layer** (commonly called **Fully Connected Layer (FCL)**), and a generic **output layer**.\n","First of all, let's define a generic layer with $n$ neurons.\n","\n","A multi-neuron layer is quite simple to implement:\n","- **input:** $\\vec{x}_i = \\begin{pmatrix}\\vec{x}_0 & \\dots \\vec{x}_m \\end{pmatrix}$ (in our case $m = 2$)\n","- **(hidden) output:** $\\vec{h}_i = \\begin{pmatrix}h_{i0} & \\dots & h_{ik}\\end{pmatrix}$ (in our case we have chosen $k = 2$)\n","- The FCL is composed of $k$ perceptrons $h_{ij}$.\n","- Each of the is equipped with a vector of weights $\\vec{w}_j$. In total, the FCL is associated with a matrix $\\vec{W} \\in \\mathbb{R}^{m \\times k}$.\n","- A perceptron $j$ operates a scalar product + sigmoid $\\sigma(\\vec{x}_i\\vec{w}_j)$. Then, the hidden layer operates a vector-matrix product + sigmoid $\\sigma(\\vec{x}_i\\vec{W})$ (the sigmoid is here applied to each single component of the vector).\n"]},{"cell_type":"code","metadata":{"id":"VN5tMuJldjiY"},"source":["class Layer(nn.Module):\n","  def __init__(self, n_in, n_out, a=None):\n","    super().__init__()\n","    W = torch.rand(n_in, n_out)\n","    b = torch.rand(n_out)  # bias parameter\n","    self.W = nn.Parameter(W)\n","    self.b = nn.Parameter(b)\n","  \n","  def forward(self, x):\n","    x = x @ self.W\n","    x = x + self.b\n","    x = torch.sigmoid(x)\n","    return x\n","\n","class MLP(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    # Sequential is a container of layer, look what happens in forward!\n","    self.layers = nn.Sequential(Layer(2, 2),  # x --> H\n","                                Layer(2, 1))  # H --> out\n","  \n","  def forward(self, x):\n","    return self.layers(x).view(-1)  # so easyyy!"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FdxsIWSjolLQ"},"source":["Now, let's illustrate the algorithm of gradient descent. It's similar to the delta rule:\n","\n","1. $e = 0$\n","2. while $e < \\mathcal{E}$\n","   1. for $\\vec{x}_i \\in \\vec{X}$\n","      1. $\\hat{y}_i = f(\\vec{x}_i)$\n","      2. $\\ell(y_i, \\hat{y}_i) = \\frac{1}{2}(\\hat{y}_i - y_i)^2$\n","   2. $E(f) = \\frac{1}{n}\\sum_{i = 1}^n \\ell(y_i, \\hat{y}_i)$\n","   3. for $j \\in \\{0, \\dots, m\\}$\n","      1. $w_j^{(e + 1)} = w_j^{(e)} - \\eta \\nabla_\\vec{w}{E(f)}$\n","   4. $e = e + 1$\n","\n","- $\\ell$ is called **loss function**, there exist many types and that proposed here is called **quadratic loss**.\n","- $E(f)$ is the '**expected loss** (or **empirical risk**). It is simply the average of the lesses computed over all the dataset. The greater is its value, the worse are our predictions. Our aim consists on minimizing it, by bringing it to $0$. It's often called \"loss\" only, generating some ambiguity with the previous term. Since we like ambiguity, we we'll use the term \"loss\". If used in combination with the quadratic loss, it's also called **Mean Squared Error (MSE)** loss\n","- $\\nabla_\\vec{w}{E(f)}$ is the gradient, that is a vector containing the derivatives of $E(f)$ for all the $w_j$. We don't compute it manually, PyTorch takes care of it 🌟\n","\n"]},{"cell_type":"code","metadata":{"id":"vY4A8a6V7bXe"},"source":["def GD(X, y_true, p, epochs=1, eta=0.5, device='cpu'):\n","  X, y_true = X.to(device), y_true.to(device)\n"," \n","  y_pred = p(X).round()\n","  prog_bar = tqdm(range(epochs), total=epochs,\n","                desc=f'E:(), ACC: {evaluate(y_true, y_pred)}')\n","  for e in prog_bar:\n","    p.train()  # switch the gradient to training mode: start gradient tracking\n","    l = torch.zeros(len(y_true), device=device)\n","\n","    for i, (x, y) in enumerate(zip(X, y_true)):\n","      y_hat = p(x).view([])  # forward step (change out shape to [] if needed)\n","      l[i] += 0.5 * (y_hat - y) ** 2.  # compute the loss\n","\n","    E = l.mean()  # compute the (expected) loss\n","    E.backward()  # backpropagation: compute the gradient\n","\n","    with torch.no_grad():  # without it, the weights can't be modified\n","      for param in p.parameters():  # weight updates\n","        param -= eta * param.grad\n","    p.zero_grad()  # remember to zero out the gradients!\n","    p.eval()  # switch the model to evaluation mode: no more gradient tracking\n","\n","    y_pred = p(X).round()  # predict based on the sigmoid values\n","    prog_bar.set_description(f'E: {E.item():.4f}, '\n","                             f'ACC: {evaluate(y_true, y_pred)}%')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fHZKLOh2il1V"},"source":["Let's run the Gradient Descent and let's see if the accuracy improves"]},{"cell_type":"code","metadata":{"id":"BYF9hlYHlZJm","colab":{"base_uri":"https://localhost:8080/","height":122,"referenced_widgets":["860ff1214beb4c21aa649faeb8e810d1","355e90d9e3634d18aaaf9906566fb4ca","892b8d98ed084d90916663c0ecb489e8","b336ef71bdde4b209ab078ed3588ad97","fcf13191a4db47478aaf2d57a1025725","51efa94a8eae4152b924941a84ec184d","d42b681bc7d8424fbf9e40732cca98a1","f47d9e1dffd747569f514c14e36e2b19"]},"executionInfo":{"status":"ok","timestamp":1590665931499,"user_tz":-120,"elapsed":232802,"user":{"displayName":"Alessandro TORCINOVICH","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi96E7HK6ff0uWSudqbJvEMactRTPtsT5-4448y=s64","userId":"03260776184459049943"}},"outputId":"873dedd2-4908-44c9-eea3-e9c996fdea5a"},"source":["mlp = MLP().to(device)\n","GD(Xor, yor_true, mlp, epochs=2000, eta=.5, device=device)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\n","Please use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n","  \n"],"name":"stderr"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"860ff1214beb4c21aa649faeb8e810d1","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='E:(), ACC: 50.0', max=2000.0, style=ProgressStyle(descrip…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1NUEvajYJ46f"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2)\n","axes = axes.ravel()\n","\n","tmp = Xor.to(device)\n","axes[0].scatter(tmp[:, 0].to('cpu').detach(),\n","                tmp[:, 1].to('cpu').detach(),\n","                c=yor_true)\n","tmp = mlp.layers[0](tmp)\n","axes[1].scatter(tmp[:, 0].to('cpu').detach(),\n","                tmp[:, 1].to('cpu').detach(),\n","                c=yor_true)\n","\n","W, b = mlp.layers[1].W, mlp.layers[1].b\n","m, q = (-W[1] / W[0]).item(), (b / W[0]).item()\n","px = np.array([0., 1.])\n","py = m * px + q\n","axes[1].plot(px, py)\n","plt.show()\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5TtzX2X7uvZ9"},"source":["# ✌️"]}]}